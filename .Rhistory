library(MASS)
Boston
load("~/Documents/Books/ISLR/data/Smarket.rda")
glm.fit = glm(Direction ~ Lag2:Lag1, data = Weekly, family = binomial, subset = train)
glm.fit = glm(Direction ~ Lag2:Lag1, data = Smarket, family = binomial, subset = train)
> glm.fit = glm(Direction ~ Lag2:Lag1, data = Smarket, family = binomial)
glm.fit = glm(Direction ~ Lag2:Lag1, data = Smarket, family = binomial)
glm.probs = predict(glm.fit, Smarket.0910, type = "response")
glm.probs = predict(glm.fit, Smarket, type = "response")
glm.pred = rep("Down", length(glm.probs))
glm.pred[glm.probs > 0.5] = "Up"
Direction.0910 = Direction[!train]
matplot(p, cbind(gini.index, class.error, cross.entropy), col = c("red", "green", "blue"))
matplot(p, cbind(gini.index, class.error, cross.entropy), col = c("red", "green", "blue"))
seq(0,1,0.01)
p=seq(0,1,0.01)
p = seq(0, 1, 0.01)
gini.index = 2 * p * (1 - p)
class.error = 1 - pmax(p, 1 - p)
cross.entropy = - (p * log(p) + (1 - p) * log(1 - p))
matplot(p, cbind(gini.index, class.error, cross.entropy), col = c("red", "green", "blue"))
p = seq(0, 1, 0.05)
p = seq(0, 1, 0.1)
p = seq(0, 1, 0.2)
p = seq(0, 1, 0.01)
gini.index = 2 * p * (1 - p)
clear
clearvars
deletre
clearall
p = seq(0, 1, 0.2)
gini.index = 2 * p * (1 - p)
class.error = 1 - pmax(p, 1 - p)
cross.entropy = - (p * log(p) + (1 - p) * log(1 - p))
matplot(p, cbind(gini.index, class.error, cross.entropy), col = c("red", "green", "blue"))
p = seq(0, 1, 0.05)
gini.index = 2 * p * (1 - p)
class.error = 1 - pmax(p, 1 - p)
cross.entropy = - (p * log(p) + (1 - p) * log(1 - p))
matplot(p, cbind(gini.index, class.error, cross.entropy), col = c("red", "green", "blue"))
p = seq(0, 1, 0.02)
gini.index = 2 * p * (1 - p)
class.error = 1 - pmax(p, 1 - p)
cross.entropy = - (p * log(p) + (1 - p) * log(1 - p))
matplot(p, cbind(gini.index, class.error, cross.entropy), col = c("red", "green", "blue"))
p = seq(0, 1, 0.01)
gini.index = 2 * p * (1 - p)
class.error = 1 - pmax(p, 1 - p)
cross.entropy = - (p * log(p) + (1 - p) * log(1 - p))
matplot(p, cbind(gini.index, class.error, cross.entropy), col = c("red", "green", "blue"))
p = seq(0, 1, 0.001)
gini.index = 2 * p * (1 - p)
class.error = 1 - pmax(p, 1 - p)
cross.entropy = - (p * log(p) + (1 - p) * log(1 - p))
matplot(p, cbind(gini.index, class.error, cross.entropy), col = c("red", "green", "blue"))
p = seq(0, 1, 0.001)
gini.index = 2 * p * (1 - p)
class.error = 1 - pmax(p, 1 - p)
cross.entropy = - (p * log(p) + (1 - p) * log(1 - p))
matplot(p, cbind(gini.index, class.error, cross.entropy), col = c("purple", "green", "blue"))
p = seq(0, 1, 0.001)
gini.index =  p * (1 - p)
class.error = 1 - pmax(p, 1 - p)
cross.entropy = - (p * log(p) + (1 - p) * log(1 - p))
matplot(p, cbind(gini.index, class.error, cross.entropy), col = c("purple", "green", "blue"))
p = seq(0, 1, 0.001)
gini.index =  p(1 - p)
class.error = 1 - pmax(1-p, p)
cross.entropy = - (p * log(p))
#cross.entropy = - (p * log(p) + (1 - p) * log(1 - p))
matplot(p, cbind(gini.index, class.error, cross.entropy), col = c("purple", "green", "blue"))
p = seq(0, 1, 0.001)
giniIndex =  p(1 - p)
classError = 1 - pmax(1-p, p)
crossEntropy = - (p * log(p))
#cross.entropy = - (p * log(p) + (1 - p) * log(1 - p))
matplot(p, cbind(giniIndex, classError, crossEntropy), col = c("purple", "green", "blue"))
library(mice)
install.packages("mice")
library(mice)
library(randomForest)
rfNews()
install.packages("randomForest")
install.packages("randomForestSRC")
setwd("~/Documents/Math459/HW4TitanicML")
library(mice)
library(randomForest)
train<-read.csv("train.csv",na.strings=c('NA',''),stringsAsFactors=F)
test<-read.csv("test.csv",na.strings=c('NA',''),stringsAsFactors=F)
library(mice)
library(randomForest)
train<-read.csv("train.csv",na.strings=c('NA',''),stringsAsFactors=F)
test<-read.csv("test.csv",na.strings=c('NA',''),stringsAsFactors=F)
train$Cat<-'train'
test$Cat<-'test'
test$Survived<-NA
full<-rbind(train,test)
#Embarked
full$Embarked[is.na(full$Embarked)]<-'S'
#Extract Title from Name
full$Title = sapply(full$Name,function(x) strsplit(x,'[.,]')[[1]][2])
full$Title<-gsub(' ','',full$Title)
full$Title[full$Title %in% c('Capt', 'Don', 'Major', 'Sir')] <- 'Sir'
full$Title[full$Title %in% c('Dona', 'Lady', 'the Countess', 'Jonkheer')] <- 'Lady'
#Adding FamilySize
full$FamilySize<-full$Parch+full$SibSp+1
#Perform Imputation to remove NAs
set.seed(144)
vars.for.imputation = setdiff(names(full), "Survived")
imputed = complete(mice(full[vars.for.imputation]))
full[vars.for.imputation] = imputed
#Adding Mother
full$Mother<-0
full$Mother[full$Sex=='female' & full$Parch>0 & full$Age>18 & full$Title!='Miss']<-1
#Adding Child
full$Child<-0
full$Child[full$Parch>0 & full$Age<=18]<- 1
#FamilyId2
Surname<-sapply(full$Name,function(x) strsplit(x,'[.,]')[[1]][1])
FamilyId<-paste0(full$FamilySize,Surname)
full$FamilyId<-factor(FamilyId)
Family<-data.frame(table(FamilyId))
SmallFamily<-Family$FamilyId[Family$Freq<=2]
FamilyId[FamilyId %in% SmallFamily]<-'Small'
full$FamilyId2<-factor(FamilyId)
#Exact Deck from Cabin number
full$Deck<-sapply(full$Cabin, function(x) strsplit(x,NULL)[[1]][1])
#Excat Position from Cabin number
full$CabinNum<-sapply(full$Cabin,function(x) strsplit(x,'[A-Z]')[[1]][2])
full$num<-as.numeric(full$CabinNum)
num<-full$num[!is.na(full$num)]
Pos<-kmeans(num,3)
full$CabinPos[!is.na(full$num)]<-Pos$cluster
full$CabinPos<-factor(full$CabinPos)
levels(full$CabinPos)<-c('Front','End','Middle')
full$num<-NULL
full<-transform(full,
Pclass=factor(Pclass),
Sex=factor(Sex),
Embarked=factor(Embarked),
Title=factor(Title),
Mother=factor(Mother),
Child=factor(Child),
FamilyId2=factor(FamilyId2),
Deck=factor(Deck)
)
#split train/test data
train<-full[full$Cat=='train',]
test<-full[full$Cat=='test',]
train$Survived<-factor(train$Survived)
library(mice)
library(randomForest)
train<-read.csv("train.csv",na.strings=c('NA',''),stringsAsFactors=F)
test<-read.csv("test.csv",na.strings=c('NA',''),stringsAsFactors=F)
check.missing<-function(x) return(paste0(round(sum(is.na(x))/length(x),4)*100,'%'))
data.frame(sapply(train,check.missing))
data.frame(sapply(test,check.missing))
train$Cat<-'train'
test$Cat<-'test'
test$Survived<-NA
full<-rbind(train,test)
#Embarked
full$Embarked[is.na(full$Embarked)]<-'S'
#Extract Title from Name
full$Title = sapply(full$Name,function(x) strsplit(x,'[.,]')[[1]][2])
full$Title<-gsub(' ','',full$Title)
full$Title[full$Title %in% c('Capt', 'Don', 'Major', 'Sir')] <- 'Sir'
full$Title[full$Title %in% c('Dona', 'Lady', 'the Countess', 'Jonkheer')] <- 'Lady'
#Adding FamilySize
full$FamilySize<-full$Parch+full$SibSp+1
#Perform Imputation to remove NAs
set.seed(144)
vars.for.imputation = setdiff(names(full), "Survived")
imputed = complete(mice(full[vars.for.imputation]))
full[vars.for.imputation] = imputed
#Adding Mother
full$Mother<-0
full$Mother[full$Sex=='female' & full$Parch>0 & full$Age>18 & full$Title!='Miss']<-1
#Adding Child
full$Child<-0
full$Child[full$Parch>0 & full$Age<=18]<- 1
#FamilyId2
Surname<-sapply(full$Name,function(x) strsplit(x,'[.,]')[[1]][1])
FamilyId<-paste0(full$FamilySize,Surname)
full$FamilyId<-factor(FamilyId)
Family<-data.frame(table(FamilyId))
SmallFamily<-Family$FamilyId[Family$Freq<=2]
FamilyId[FamilyId %in% SmallFamily]<-'Small'
full$FamilyId2<-factor(FamilyId)
#Exact Deck from Cabin number
full$Deck<-sapply(full$Cabin, function(x) strsplit(x,NULL)[[1]][1])
#Excat Position from Cabin number
full$CabinNum<-sapply(full$Cabin,function(x) strsplit(x,'[A-Z]')[[1]][2])
full$num<-as.numeric(full$CabinNum)
num<-full$num[!is.na(full$num)]
Pos<-kmeans(num,3)
full$CabinPos[!is.na(full$num)]<-Pos$cluster
full$CabinPos<-factor(full$CabinPos)
levels(full$CabinPos)<-c('Front','End','Middle')
full$num<-NULL
full<-transform(full,
Pclass=factor(Pclass),
Sex=factor(Sex),
Embarked=factor(Embarked),
Title=factor(Title),
Mother=factor(Mother),
Child=factor(Child),
FamilyId2=factor(FamilyId2),
Deck=factor(Deck)
)
#split train/test data
train<-full[full$Cat=='train',]
test<-full[full$Cat=='test',]
train$Survived<-factor(train$Survived)
write.csv(train,'PreProcessedTrain.csv',row.names=T)
library(party)
#cf.fit<-cforest(Survived~Pclass+Sex+Age+SibSp+Parch+Fare+Embarked+Title+Mother+Child,data=train,controls=cforest_unbiased(ntree=2000, mtry=3))
cf.fit<-cforest(train$Survived~FamilyId2+CabinPos+Deck+Pclass+Sex+Age+SibSp+Parch+Fare+Embarked+Title+Mother+Child+Deck,data=train,controls=cforest_unbiased(ntree=2000, mtry=3))
test$Survived = predict(cf.fit, test, OOB=TRUE,type='response')
trainVars=FamilyId2+CabinPos+Deck+Pclass+Sex+Age+SibSp+Parch+Fare+Embarked+Title+Mother+Child+Deck,data=train
write.csv(submission,'submission.csv',row.names=F)
library(mice)
library(randomForest)
train<-read.csv("train.csv",na.strings=c('NA',''),stringsAsFactors=F)
test<-read.csv("test.csv",na.strings=c('NA',''),stringsAsFactors=F)
check.missing<-function(x) return(paste0(round(sum(is.na(x))/length(x),4)*100,'%'))
#data.frame(sapply(train,check.missing))
#data.frame(sapply(test,check.missing))
train$Cat<-'train'
test$Cat<-'test'
test$Survived<-NA
full<-rbind(train,test)
#Embarked
#data.frame(sapply(train,check.missing))
#data.frame(sapply(test,check.missing))
train$Cat<-'train'
test$Cat<-'test'
test$Survived<-NA
full<-rbind(train,test)
#Embarked
full$Embarked[is.na(full$Embarked)]<-'S'
#Extract Title from Name
full$Title = sapply(full$Name,function(x) strsplit(x,'[.,]')[[1]][2])
full$Title<-gsub(' ','',full$Title)
full$Title[full$Title %in% c('Capt', 'Don', 'Major', 'Sir')] <- 'Sir'
full$Title[full$Title %in% c('Dona', 'Lady', 'the Countess', 'Jonkheer')] <- 'Lady'
#Adding FamilySize
full$FamilySize<-full$Parch+full$SibSp+1
#Perform Imputation to remove NAs
set.seed(144)
vars.for.imputation = setdiff(names(full), "Survived")
imputed = complete(mice(full[vars.for.imputation]))
full[vars.for.imputation] = imputed
#Adding Mother
full$Mother<-0
full$Mother[full$Sex=='female' & full$Parch>0 & full$Age>18 & full$Title!='Miss']<-1
#Adding Child
full$Child<-0
full$Child[full$Parch>0 & full$Age<=18]<- 1
#FamilyId2
Surname<-sapply(full$Name,function(x) strsplit(x,'[.,]')[[1]][1])
FamilyId<-paste0(full$FamilySize,Surname)
full$FamilyId<-factor(FamilyId)
Family<-data.frame(table(FamilyId))
SmallFamily<-Family$FamilyId[Family$Freq<=2]
FamilyId[FamilyId %in% SmallFamily]<-'Small'
full$FamilyId2<-factor(FamilyId)
#Exact Deck from Cabin number
full$Deck<-sapply(full$Cabin, function(x) strsplit(x,NULL)[[1]][1])
#Excat Position from Cabin number
full$CabinNum<-sapply(full$Cabin,function(x) strsplit(x,'[A-Z]')[[1]][2])
full$num<-as.numeric(full$CabinNum)
num<-full$num[!is.na(full$num)]
Pos<-kmeans(num,3)
full$CabinPos[!is.na(full$num)]<-Pos$cluster
full$CabinPos<-factor(full$CabinPos)
levels(full$CabinPos)<-c('Front','End','Middle')
full$num<-NULL
full<-transform(full,
Pclass=factor(Pclass),
library(mice)
library(randomForest)
train<-read.csv("train.csv",na.strings=c('NA',''),stringsAsFactors=F)
library(mice)
library(randomForest)
train<-read.csv("train.csv",na.strings=c('NA',''),stringsAsFactors=F)
test<-read.csv("test2.csv",na.strings=c('NA',''),stringsAsFactors=F)
check.missing<-function(x) return(paste0(round(sum(is.na(x))/length(x),4)*100,'%'))
#data.frame(sapply(train,check.missing))
#data.frame(sapply(test,check.missing))
train$Cat<-'train'
test$Cat<-'test'
test$Survived<-NA
full<-rbind(train,test)
#Embarked
full$Embarked[is.na(full$Embarked)]<-'S'
#Extract Title from Name
full$Title = sapply(full$Name,function(x) strsplit(x,'[.,]')[[1]][2])
full$Title<-gsub(' ','',full$Title)
full$Title[full$Title %in% c('Capt', 'Don', 'Major', 'Sir')] <- 'Sir'
full$Title[full$Title %in% c('Dona', 'Lady', 'the Countess', 'Jonkheer')] <- 'Lady'
#Adding FamilySize
full$FamilySize<-full$Parch+full$SibSp+1
#Perform Imputation to remove NAs
set.seed(144)
vars.for.imputation = setdiff(names(full), "Survived")
imputed = complete(mice(full[vars.for.imputation]))
full[vars.for.imputation] = imputed
#Adding Mother
full$Mother<-0
full$Mother[full$Sex=='female' & full$Parch>0 & full$Age>18 & full$Title!='Miss']<-1
#Adding Child
full$Child<-0
full$Child[full$Parch>0 & full$Age<=18]<- 1
#FamilyId2
Surname<-sapply(full$Name,function(x) strsplit(x,'[.,]')[[1]][1])
FamilyId<-paste0(full$FamilySize,Surname)
full$FamilyId<-factor(FamilyId)
Family<-data.frame(table(FamilyId))
SmallFamily<-Family$FamilyId[Family$Freq<=2]
FamilyId[FamilyId %in% SmallFamily]<-'Small'
full$FamilyId2<-factor(FamilyId)
#Exact Deck from Cabin number
full$Deck<-sapply(full$Cabin, function(x) strsplit(x,NULL)[[1]][1])
#Excat Position from Cabin number
full$CabinNum<-sapply(full$Cabin,function(x) strsplit(x,'[A-Z]')[[1]][2])
full$num<-as.numeric(full$CabinNum)
num<-full$num[!is.na(full$num)]
Pos<-kmeans(num,3)
full$CabinPos[!is.na(full$num)]<-Pos$cluster
full$CabinPos<-factor(full$CabinPos)
levels(full$CabinPos)<-c('Front','End','Middle')
full$num<-NULL
full<-transform(full,
Pclass=factor(Pclass),
Sex=factor(Sex),
Embarked=factor(Embarked),
Title=factor(Title),
Mother=factor(Mother),
Child=factor(Child),
FamilyId2=factor(FamilyId2),
Deck=factor(Deck)
)
#split train/test data
train<-full[full$Cat=='train',]
test<-full[full$Cat=='test',]
train$Survived<-factor(train$Survived)
write.csv(train,'PreProcessedTrain2.csv',row.names=T)
write.csv(test,'PreProcessedTrain2.csv',row.names=T)
write.csv(train,'PreProcessedTrain2.csv',row.names=T)
write.csv(test,'PreProcessedTest2.csv',row.names=T)
